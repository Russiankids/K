import asyncio
import disnake # Changed from discord to disnake
import os # Import os for environment variables if conf.py is not used for TOKEN
from dotenv import load_dotenv # Import load_dotenv if TOKEN is from .env

# --- Configuration (Assumed to be in conf.py or environment variables) ---
# For demonstration purposes, if conf.py is not available,
# you would typically load these from environment variables or direct assignment.
# Let's assume conf.py exists as per the user's original code.
# If conf.py doesn't exist, replace the imports below with direct assignments or
# load from .env using load_dotenv() and os.getenv().

# Example dummy values if conf.py is not used for local testing:
# load_dotenv()
# TOKEN = os.getenv('DISCORD_TOKEN') or 'YOUR_BOT_TOKEN_HERE'
# TO_CHANNEL = int(os.getenv('TO_CHANNEL_ID') or '123456789012345678') # Replace with actual channel ID
# FROM_CHANNELS = [int(id) for id in (os.getenv('FROM_CHANNEL_IDS') or '123456789012345679,123456789012345680').split(',')]
# Verbose = True # Set to False for less console output
# AUTHORIZED_ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID') or '123456789012345681') # Replace with actual user ID

# Assuming conf.py exists and contains these variables:
try:
    from conf import TOKEN, TO_CHANNEL, FROM_CHANNELS, Verbose, AUTHORIZED_ADMIN_USER_ID
except ImportError:
    print("Warning: conf.py not found or incomplete. Attempting to load from environment variables.")
    load_dotenv()
    TOKEN = os.getenv('DISCORD_TOKEN')
    TO_CHANNEL = int(os.getenv('TO_CHANNEL_ID', '0')) # Default to 0 if not found
    FROM_CHANNELS = [int(id) for id in os.getenv('FROM_CHANNEL_IDS', '').split(',') if id.strip()]
    Verbose = os.getenv('VERBOSE', 'False').lower() == 'true'
    AUTHORIZED_ADMIN_USER_ID = int(os.getenv('AUTHORIZED_ADMIN_USER_ID', '0'))

    if not TOKEN:
        print("[CRITICAL] DISCORD_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.") # Translated
    if not TO_CHANNEL:
        print("[CRITICAL] TO_CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.") # Translated
    if not FROM_CHANNELS:
        print("[CRITICAL] FROM_CHANNEL_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).") # Translated
    if not AUTHORIZED_ADMIN_USER_ID:
        print("[CRITICAL] AUTHORIZED_ADMIN_USER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.") # Translated


# --- Bot Setup ---

# Define the necessary intents for the bot.
# Intents are crucial for specifying which events your bot wants to receive from Discord.
# disnake.Intents.default() provides common intents, but for message content,
# disnake.Intents.message_content must be explicitly enabled for non-privileged gateway intents.
# For forwarding messages, at least messages and message_content are needed.
intents = disnake.Intents.default()
intents.messages = True # Required to receive message events
intents.message_content = True # Required to access message.content (privileged intent)
# If your bot interacts with guilds/members, you might need:
# intents.guilds = True
# intents.members = True # Privileged intent, requires enabling in Discord Developer Portal

# Initialize the Disnake client for a standard bot.
# The `self_bot` argument is not supported by disnake's Client class,
# as disnake is designed for regular bot accounts.
client = disnake.Client(intents=intents) # Removed self_bot=True and added intents

# Global variables to store channel objects after the bot logs in.
# This avoids repeatedly fetching channel objects by ID.
to_channel_obj = None
from_channel_objs = {}


@client.event
async def on_ready():
    """
    Called when the bot is ready and connected to Discord.
    This function finds and validates the channels specified in conf.py
    (or environment variables) and caches their objects.
    """
    global to_channel_obj, from_channel_objs

    print("-" * 30)
    print(f"–í–æ—à–µ–ª –∫–∞–∫ {client.user.name}#{client.user.discriminator} (ID: {client.user.id})") # Translated
    print(f"ID –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {AUTHORIZED_ADMIN_USER_ID}") # Translated
    print("-" * 30)
    print("–ü–æ–∏—Å–∫ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...") # Translated

    # Attempt to find the configured destination channel.
    to_channel_obj = client.get_channel(TO_CHANNEL)
    if to_channel_obj:
        print(f"[OK] –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: #{to_channel_obj.name} ({to_channel_obj.id})") # Translated
    else:
        print(
            f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª —Å ID: {TO_CHANNEL}. " # Translated
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª." # Translated
        )

    # Iterate through the list of source channel IDs and find their objects.
    for channel_id in FROM_CHANNELS:
        channel = client.get_channel(channel_id)
        if channel:
            from_channel_objs[channel_id] = channel
            print(f"[OK] –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: #{channel.name} ({channel.id})") # Translated
        else:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª —Å ID: {channel_id}. –û–Ω –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.") # Translated

    # Critical check: If no destination or source channels are found,
    # inform the user that the bot cannot function correctly.
    if not to_channel_obj or not from_channel_objs:
        print(
            "\n[CRITICAL] –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞. " # Translated
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ ID –≤ conf.py (–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è) –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ." # Translated
        )
    else:
        print("\n–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.") # Translated
    print("-" * 30)


@client.event
async def on_message(message: disnake.Message): # Changed from discord.Message to disnake.Message
    """
    Processes incoming messages from any channel the bot can see.
    This function handles both the `!resend_channel` command and
    standard message forwarding.
    """
    # Important: Prevent the bot from reacting to its own messages to avoid loops.
    if message.author == client.user:
        return

    # Optional: Print verbose message reception information.
    if Verbose:
        print(f"-> –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –≤ #{message.channel.name} –æ—Ç {message.author.name}") # Translated

    # --- !resend_channel Command Logic ---
    # This command allows an authorized admin to resend messages from a specified
    # source channel to the configured destination channel.
    if message.content.lower().startswith('!resend_channel'):
        # Check if the message author is the authorized admin.
        if message.author.id != AUTHORIZED_ADMIN_USER_ID:
            if Verbose:
                print(f"-> –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ !resend_channel –æ—Ç {message.author.name} (ID: {message.author.id})") # Translated
            await message.channel.send("üö´ –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.") # Translated
            return

        try:
            # Parse the command arguments: channel ID and optional number of messages.
            # Strips '<#>' from channel mentions to get the raw ID.
            parts = message.content.split()
            target_resend_channel_id = int(parts[1].strip('<#>'))
            # Default to 100 messages if not specified, limit to 200.
            num_messages_to_resend = int(parts[2]) if len(parts) > 2 else 100
            if num_messages_to_resend > 200:
                num_messages_to_resend = 200
            if num_messages_to_resend < 1:
                num_messages_to_resend = 1
        except (ValueError, IndexError):
            # Inform the user about incorrect command usage.
            await message.channel.send("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!resend_channel <channel_id> [num_messages]`") # Translated
            return

        # Fetch the source channel object for the resend operation.
        source_channel = client.get_channel(target_resend_channel_id)
        if not source_channel:
            await message.channel.send(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª —Å ID {target_resend_channel_id}.") # Translated
            return
        # Ensure the destination channel is configured.
        if not to_channel_obj:
            await message.channel.send("‚ùå –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.") # Translated
            return

        print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç—å {num_messages_to_resend} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞: {source_channel.name}") # Translated
        await message.channel.send(f"üîÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ {num_messages_to_resend} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {source_channel.mention}...") # Translated

        try:
            # Determine the guild name for context.
            source_guild_name = source_channel.guild.name if source_channel.guild else "–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" # Translated
            # Fetch message history from the source channel, oldest first.
            async for msg_to_resend in source_channel.history(limit=num_messages_to_resend, oldest_first=True):
                # Construct the forwarded message content with origin information.
                forwarded_msg_content = (
                    f'ü§ñ[–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç **{msg_to_resend.author}** –≤ `{source_guild_name}/{source_channel.name}`]\n' # Translated
                    f'{msg_to_resend.content}'
                )
                await to_channel_obj.send(forwarded_msg_content)

                # Forward attachments and embeds.
                for attachment in msg_to_resend.attachments:
                    await to_channel_obj.send(attachment.url)
                for embed in msg_to_resend.embeds:
                    if embed.url: # Only send URL if present for a basic embed forwarding
                        await to_channel_obj.send(embed.url)
                await asyncio.sleep(1) # Small delay to avoid rate limits.

            await message.channel.send(
                f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {source_channel.mention} –≤ {to_channel_obj.mention}." # Translated
            )
            print("\t> –í—Å–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–ª–∞–Ω—ã.") # Translated
        except disnake.Forbidden: # Changed from discord.Forbidden to disnake.Forbidden
            # Handle cases where the bot lacks permission to read history.
            await message.channel.send(
                f"‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {source_channel.mention}." # Translated
            )
        except Exception as e:
            # Catch any other unexpected errors during resend.
            await message.channel.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}") # Translated
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}") # Translated
        return # Exit the function after handling the command.

    # --- Standard Message Forwarding Logic ---
    # This logic applies if the message is not a command and is from a configured source channel.
    # Check if the message's channel ID is in our list of `FROM_CHANNELS`
    # and if the `to_channel_obj` is properly configured.
    if message.channel.id not in from_channel_objs or not to_channel_obj:
        return # Do nothing if not a source channel or destination is missing.

    # Determine the server name for contextual forwarding.
    server_name = message.guild.name if message.guild else "–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" # Translated
    # Construct the forwarded message content.
    forward_msg_content = f'ü§ñ**{message.author}** –∏–∑ `{server_name}/{message.channel.name}`\n{message.content}' # Translated

    # Send the message to the destination channel.
    await to_channel_obj.send(forward_msg_content)
    if Verbose:
        print(f"  > –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç {message.author.name} –≤ #{message.channel.name}") # Translated

    # Forward any attachments and embeds that came with the original message.
    for attachment in message.attachments:
        await to_channel_obj.send(attachment.url)
    for embed in message.embeds:
        if embed.url: # Only send URL if present for a basic embed forwarding
            await to_channel_obj.send(embed.url)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...") # Translated
    try:
        # Attempt to run the bot with the provided token.
        client.run(TOKEN)
    except disnake.errors.LoginFailure: # Changed from discord.errors.LoginFailure to disnake.errors.LoginFailure
        # Catch specific login failure errors (e.g., invalid token).
        print("\n[CRITICAL] –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à —Ñ–∞–π–ª `conf.py` –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.") # Translated
    except Exception as e:
        # Catch any other unhandled exceptions during bot execution.
        print(f"\n[CRITICAL] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}") # Translated

